@page "/devicesimulator"

@inject ProtoDeviceStateService.ProtoDeviceStateServiceClient ProtoDeviceStateServiceClient
@inject ProtoChangeDeviceIOStatusService.ProtoChangeDeviceIOStatusServiceClient ProtoChangeDeviceIOStatusServiceClient
@inject ProtoIOEventsStreamService.ProtoIOEventsStreamServiceClient ProtoIOEventsStreamServiceClient
@inject ISnackbar Snackbar

@using Google.Protobuf.WellKnownTypes;
@using Grpc.Core;
@using MudBlazor
@using ioDeviceEmulator.Client.ViewModels;
@using ioDeviceEmulator.Shared;

<MudGrid Justify="Justify.FlexStart" xs="12">

    <MudItem >
        <MudPaper Class="pa-8 ma-2" Elevation="4" Height="401px">

        <h3>Digital inputs</h3>

        @if (digitalInpuuts == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var di in digitalInpuuts)
            {
                    var diIndex = di.Index;

                <MudStack Row="true" Class="d-flex align-center">
                        <MudToggleIconButton Toggled="@di.Activated" ToggledChanged="@(e => UpdateDigitalInputStatus(e, diIndex))"
                                 Icon="@Icons.Material.Filled.LinkOff" Color="@Color.Error" Title="Open"
                                 ToggledIcon="@Icons.Material.Filled.Link" ToggledColor="@Color.Success" ToggledTitle="Closed" />
                        <MudText Style="margin-right:12px">@di.Name is @(di.Activated ? "On (1)" : "Off (0)")</MudText>
                </MudStack>
            }
        }

        </MudPaper>

    </MudItem>

    <MudItem >

        <MudPaper Class="pa-8 ma-2" Elevation="4" Height="400px">

            <h3>Relays</h3>

            @if (relays == null)
            {
                    <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var forecast in relays)
                {
                    <MudStack Row="true"  Class="d-flex align-center" Style="padding:12px">
                        @if (forecast.Activated)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.KeyboardOptionKey" Color="Color.Success" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.KeyboardOptionKey" style="@($"color:{Colors.Grey.Default};")" />
                        }
                        <MudText Style="margin-left:12px margin-right:12px"> @forecast.Name is @(forecast.Activated ? "On (1)" : "Off (0)")</MudText>
                    </MudStack>
                }
            }

        </MudPaper>
    </MudItem>
    
    <MudItem>
        <MudPaper Class="pa-8 ma-2" Elevation="4" Height="400px">
         
            <MudStack Row="true">
      
                <div>
                    <h3>Barrier Simulator</h3>
                    
                    <div style="margin:12px; margin-top:20px;">
                        Rotation @barrier.Rotation.ToString()
                    </div>

                    @if (barrier.BarrierTerminals == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        @foreach (var di in barrier.BarrierTerminals)
                        {
                            var diIndex = di.Index;

                            <MudStack Row="true" Class="d-flex align-center">
                                <MudToggleIconButton Toggled="@di.Activated" ToggledChanged="@(e => UpdateBarrierTerminalStatus(e, diIndex))"
                                             Icon="@Icons.Material.Filled.LinkOff" Color="@Color.Error" Title="Open"
                                             ToggledIcon="@Icons.Material.Filled.Link" ToggledColor="@Color.Success" ToggledTitle="Closed" />
                                <MudText Style="margin-right:12px">@di.Name is @(di.Activated ? "On (1)" : "Off (0)")</MudText>
                                </MudStack>
                        }
                    }
                 
                </div>
                <div style=" height:174px; margin-top:148px; margin-right:20px">
                    <div>
                        <img width="70" src="Images/barrier_body.svg" style="position:relative;" />
                    </div>
                    <div class="movethis" style="position:relative; transform: translate(26px, -160px)">
                        <img width="230" src="Images/barrier_arm.svg"
                             style="transform: rotate(@(-barrier.Rotation)deg) !important; transform-origin: 11% 50%;">
                    </div>
                </div>
            </MudStack>
        </MudPaper>
    </MudItem>

    <MudItem xs="12">

        <MudPaper Class="pa-8 ma-2" Elevation="4" >

            <h3>IO Events</h3>

        @if (ioEvents == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>IO Type</th>
                        <th>Index</th>
                        <th>Status</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ioEvent in ioEvents)
                    {
                        <tr>
                            <td>@ioEvent.Date.ToLongTimeString()</td>
                            <td>@ConvertIOTypeToString(ioEvent.IoType)</td>
                            <td>@ioEvent.Index</td>
                            <td>@ioEvent.Status</td>
                            <td>@ioEvent.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        </MudPaper>

    </MudItem>

</MudGrid>

@code {

    private IList<DigitalInputViewModel>? digitalInpuuts;
    private IList<RelayViewModel>? relays;
    private BarrierViewModel barrier;

    private IList<ProtoIOEvent> ioEvents = new List<ProtoIOEvent>();
    private AsyncServerStreamingCall<ProtoIOEvent>? stream;

    public DeviceSimulator()
    {
        barrier = new BarrierViewModel();
        barrier.RotationChanged += new EventHandler<EventArgs>(OnRotationChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        // device state:
        var response = await ProtoDeviceStateServiceClient.GetProtoDeviceStateAsync(new Empty());
        var protoDis = response.DigitalInputs;
        var protoRs = response.Relays;

        digitalInpuuts = new List<DigitalInputViewModel>();

        foreach (var pdi in protoDis)
            digitalInpuuts.Add(new DigitalInputViewModel()
            {
                Index = pdi.Index,
                Name = $"Digital input {pdi.Index}",
                Activated = pdi.Status != 0 ? true : false
            });


        relays = new List<RelayViewModel>();

        foreach (var pr in protoRs)
            relays.Add(new RelayViewModel()
            {
                Index = pr.Index,
                Name = $"Relay {pr.Index}",
                Activated = pr.Status != 0 ? true : false
            });


        // live events:
        Console.WriteLine("start");
        stream = ProtoIOEventsStreamServiceClient.GetProtoIOEventsStream(new Empty());
        Console.WriteLine("lisening");

        var task = Task.Run(async () =>
        {
            Console.WriteLine("wait");
            while (await stream.ResponseStream.MoveNext())
            {
                try
                {
                    Console.WriteLine("get new data");
                    ProtoIOEvent? protoEvent = stream.ResponseStream.Current;

                    // Add in events list:
                    ioEvents.Add(protoEvent);

                    // Update element:
                    UpdateTargetViewModelOfEvent(protoEvent);

                    await InvokeAsync(() => { this.StateHasChanged(); });
                    Console.WriteLine("lisening");
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
            Console.WriteLine("done");
        });



    }

    private void UpdateTargetViewModelOfEvent( ProtoIOEvent? ioEvent)
    {
        if (ioEvent?.IoType == (int)ioElementType.DigitalInput)
        {
            var di =  digitalInpuuts?.Where(di => di.Index == ioEvent.Index).FirstOrDefault();

            if (di != null)
                di.Activated = ioEvent.Status != 0 ? true : false;
        } 
        else if (ioEvent?.IoType == (int)ioElementType.Relay)
        {
            var r = relays?.Where(r => r.Index == ioEvent.Index).FirstOrDefault();

            if (r != null)
            {
                r.Activated = ioEvent.Status != 0 ? true : false;

                if (r.Index == 0)
                    barrier.UpdateBarrierTerminal(0, r.Activated);
            }
        }
    }

    private int SwitchedOnCount = 0;
    private async void UpdateDigitalInputStatus(bool toggled, int diIndex)
    {
        OperationResponse 
             response = await ProtoChangeDeviceIOStatusServiceClient.SetProtoIOStatusAsync(new SetIOStatusRequest()
                {
                    IoType = (int)ioElementType.DigitalInput,
                    Index = diIndex,
                    Status = toggled ? 1 : 0
                });

        Console.WriteLine("here response ");

        if (response == null)
            return;

        if (response.Success == false) {

            Console.WriteLine("success is false ");

            var diVM = digitalInpuuts.Where(di => di.Index == diIndex).FirstOrDefault();

            if (diVM == null)
                return;

            var tg = toggled;
            var task = Task.Run(async () =>
              {
                  diVM.Activated = tg;
                  await InvokeAsync(() => { this.StateHasChanged(); });

                  await Task.Delay(200);

                  diVM.Activated = !tg;
                  await InvokeAsync(() => { this.StateHasChanged(); });
              });


            Snackbar.Add("Failed to change the digital input status.", Severity.Error);
        } 


    }


  


    public void OnRotationChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void UpdateBarrierTerminalStatus(bool toggled, int diIndex)
    {
        barrier.UpdateBarrierTerminal(diIndex, toggled);
    }


    private static string ConvertIOTypeToString(int ioType)
    {
        return "Digital input";
    }


}