@page "/devicesimulator"


@using Google.Protobuf.WellKnownTypes;
@using Grpc.Core;
@using MudBlazor
@using ioDeviceEmulator.Client.Dialogs;
@using ioDeviceEmulator.Client.ViewModels;
@using ioDeviceEmulator.Shared;
@using Microsoft.JSInterop;

@inject ProtoDeviceStateService.ProtoDeviceStateServiceClient ProtoDeviceStateServiceClient
@inject ProtoChangeDeviceIOStatusService.ProtoChangeDeviceIOStatusServiceClient ProtoChangeDeviceIOStatusServiceClient
@inject ProtoIOEventsStreamService.ProtoIOEventsStreamServiceClient ProtoIOEventsStreamServiceClient
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService



@implements IDisposable;






<MudGrid Justify="Justify.FlexStart" xs="12">

    <MudItem>
        <MudPaper Class="border-solid border-2 mud-border-primary pa-4" Elevation="0">

            <h3>MOXA</h3>

            <MudGrid Justify="Justify.FlexStart" xs="12">
                <MudItem>
                    <MudPaper Class="pa-8 ma-2" Elevation="4" Height="401px">

                        <h3>Digital inputs</h3>

                        @if (digitalInpuuts == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            @foreach (var di in digitalInpuuts)
                            {
                                var diIndex = di.Index;

                                <MudStack Row="true" Class="d-flex align-center">
                                    <MudToggleIconButton Toggled="@di.Activated" ToggledChanged="@(e => UpdateDigitalInputStatus(e, diIndex))"
                                                 Icon="@Icons.Material.Filled.LinkOff" Color="@Color.Error" Title="Open"
                                                 ToggledIcon="@Icons.Material.Filled.Link" ToggledColor="@Color.Success" ToggledTitle="Closed" />
                                    <MudText Style="margin-right:12px">@di.Name is @(di.Activated ? "On (1)" : "Off (0)")</MudText>
                                    </MudStack>
                            }
                        }

                    </MudPaper>

                </MudItem>

                <MudItem>

                    <MudPaper Class="pa-8 ma-2" Elevation="4" Height="400px">

                        <h3>Relays</h3>

                        @if (relays == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            @foreach (var forecast in relays)
                            {
                                <MudStack Row="true" Class="d-flex align-center" Style="padding:12px">
                                    @if (forecast.Activated)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.KeyboardOptionKey" Color="Color.Success" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.KeyboardOptionKey" style="@($"color:{Colors.Grey.Default};")" />
                                    }
                                    <MudText Style="margin-left:12px margin-right:12px"> @forecast.Name is @(forecast.Activated ? "On (1)" : "Off (0)")</MudText>
                                    </MudStack>
                            }
                        }

                    </MudPaper>
                </MudItem>
            </MudGrid>


        </MudPaper>

    </MudItem>




    <MudItem>
        <MudPaper Class="border-solid border-2 mud-border-primary pa-4" Elevation="0">
            <h3>Barrier</h3>
            <MudItem>

                <MudGrid Justify="Justify.FlexStart" xs="12">
                    <MudItem>
                        <MudPaper Class="pa-8 ma-2" Elevation="4" Height="400px">

                            <MudStack Row="true">

                                <div>
                                    <h3>Barrier Simulator</h3>

                                    @if (barrier.BarrierTerminals == null)
                                    {
                                        <p><em>Loading...</em></p>
                                    }
                                    else
                                    {
                                        @foreach (var di in barrier.BarrierTerminals)
                                        {
                                            var diIndex = di.Index;

                                            <MudStack Row="true" Class="d-flex align-center">
                                                <MudToggleIconButton Toggled="@di.Activated" ToggledChanged="@(e => UpdateBarrierTerminalStatus(e, diIndex))"
                                                             Icon="@Icons.Material.Filled.LinkOff" Color="@Color.Error" Title="Open"
                                                             ToggledIcon="@Icons.Material.Filled.Link" ToggledColor="@Color.Success" ToggledTitle="Closed" />
                                                
                                                             <MudText>@di.Name is @(di.Activated ? "On (1)" : "Off (0)")</MudText>

                                                 <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => ChangeBarrierWiring(diIndex))"></MudIconButton>
                                            </MudStack>
                                        }
                                    }

                                </div>
                                <div style=" height:174px; margin-top:148px; margin-right:20px">
                                    <div>
                                        <img width="70" src="Images/barrier_body.svg" style="position:relative;" />
                                    </div>
                                    <div class="movethis" style="position:relative; transform: translate(26px, -160px)">
                                        <img id="rotating-image" width="230" src="Images/barrier_arm.svg"
                                             style=" transform-origin: 11% 50%;">
                                        @*  transform: rotate(@(-barrier.Rotation)deg) !important;*@



                                    </div>
                                </div>
                            </MudStack>
                        </MudPaper>

                    </MudItem>
                </MudGrid>

            </MudItem>
        </MudPaper>


    </MudItem>




    <MudItem xs="12">

        <MudPaper Class="pa-8 ma-2" Elevation="4">

            <h3>IO Events</h3>

            @if (ioEvents == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>IO Type</th>
                            <th>Index</th>
                            <th>Status</th>
                            <th>Summary</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ioEvent in ioEvents)
                        {
                            <tr>
                                <td>@ioEvent.Date.ToLongTimeString()</td>
                                <td>@ConvertIOTypeToString(ioEvent.IoType)</td>
                                <td>@ioEvent.Index</td>
                                <td>@ioEvent.Status</td>
                                <td>@ioEvent.Summary</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </MudPaper>

    </MudItem>

</MudGrid>

@code {

    private IList<DigitalInputViewModel>? digitalInpuuts;
    private IList<RelayViewModel>? relays;
    private BarrierViewModel barrier;

    private IList<ProtoIOEvent> ioEvents = new List<ProtoIOEvent>();
    private AsyncServerStreamingCall<ProtoIOEvent>? stream;


    private bool _lastCmdTryToOpen;
    public readonly object lockObj = new object();

    private IJSObjectReference? _jsModule;
    private DotNetObjectReference<DeviceSimulator> _dotNetReference;
    private IJSObjectReference? _rotatingImage;

    public DeviceSimulator()
    {
        barrier = new BarrierViewModel();
        barrier.RotatingOpenStarted += new EventHandler<EventArgs>(OnRotationOpenStarted);
        barrier.RotationCloseStarted += new EventHandler<EventArgs>(OnRotationCloseStarted);
    }


    protected override async Task OnInitializedAsync()
    {
        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/rotationScript.js");

        // device state:
        var response = await ProtoDeviceStateServiceClient.GetProtoDeviceStateAsync(new Empty());
        var protoDis = response.DigitalInputs;
        var protoRs = response.Relays;

        digitalInpuuts = new List<DigitalInputViewModel>();

        foreach (var pdi in protoDis)
            digitalInpuuts.Add(new DigitalInputViewModel()
                {
                    Index = pdi.Index,
                    Name = $"Digital input {pdi.Index}",
                    Activated = pdi.Activated != 0 ? true : false
                });


        relays = new List<RelayViewModel>();

        foreach (var pr in protoRs)
            relays.Add(new RelayViewModel()
                {
                    Index = pr.Index,
                    Name = $"Relay {pr.Index}",
                    Activated = pr.Activated != 0 ? true : false
                });


        // live events:
        stream = ProtoIOEventsStreamServiceClient.GetProtoIOEventsStream(new Empty());

        var task = Task.Run(async () =>
        {

            while (await stream.ResponseStream.MoveNext())
            {
                try
                {
                    Console.WriteLine("Received a new stream IO event.");

                    ProtoIOEvent? protoEvent = stream.ResponseStream.Current;

                    // Add in events list:
                    ioEvents.Add(protoEvent);

                    // Update element:
                    UpdateTargetViewModelOfEvent(protoEvent);

                    await InvokeAsync(() => { this.StateHasChanged(); });

                }
                catch (Exception ex)
                {
                    Console.WriteLine("Exception" + ex.Message);
                }
            }

        });



    }


    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            // Get a reference to the image element
            _dotNetReference = DotNetObjectReference.Create(this);
            _rotatingImage = await JSRuntime.InvokeAsync<IJSObjectReference>("document.getElementById", "rotating-image");

        }
    }



    public void Dispose()
    {
        stream?.Dispose();
    }






    // UI events:

    [JSInvokableAttribute("ioDeviceEmulator.Client")]
    public void InformationWhenTransitionFinished()
    {
        Console.WriteLine("Transition finished.");

        bool lastCommandIsTryToOpen = false;
        lock (lockObj)
        {
            lastCommandIsTryToOpen = _lastCmdTryToOpen;
        }

        if (lastCommandIsTryToOpen)
            barrier.SetViewModelStateToOpen();
        else
            barrier.SetViewModelStateToClose();

    }

    private void UpdateBarrierTerminalStatus(bool toggled, int diIndex)
    {
        barrier.UpdateBarrierTerminal(diIndex, toggled);
    }

    private void UpdateTargetViewModelOfEvent(ProtoIOEvent? ioEvent)
    {
        if (ioEvent?.IoType == (int)ioElementType.DigitalInput)
        {
            var di = digitalInpuuts?.Where(di => di.Index == ioEvent.Index).FirstOrDefault();

            if (di != null)
                di.Activated = ioEvent.Status != 0 ? true : false;
        }
        else if (ioEvent?.IoType == (int)ioElementType.Relay)
        {
            var r = relays?.Where(r => r.Index == ioEvent.Index).FirstOrDefault();

            if (r != null)
            {
                r.Activated = ioEvent.Status != 0 ? true : false;

                barrier.UpdateBarrierTerminalWiredToRelay(r.Index, r.Activated);
            }
        }
    }

    async Task ChangeBarrierWiring(int diIndex)
    {
        Console.WriteLine("di sel is " + diIndex);


        RelayWiring? rw =  barrier.RelayWirings.Where(w => w.BarrierTerminalIndex == diIndex).FirstOrDefault();



        int? currentRelayIndex = rw != null ? rw.RelayIndex : null;

        var parameters = new DialogParameters();
        parameters.Add("CurrentRelayIndex", currentRelayIndex);

        var options = new DialogOptions() { CloseOnEscapeKey = true };



        var dialog = DialogService.Show<ChangeWiringDialog>("Simple Dialog", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.

            int newRelay = (int)result.Data;
            Console.WriteLine("new relay is" + newRelay);

            if (rw == null){
                if (newRelay >= 0)
                    barrier.RelayWirings.Add(new RelayWiring()
                    {
                        RelayIndex = newRelay,
                        BarrierTerminalIndex = diIndex
                    });
            }
            else
            {
                if (newRelay >= 0)
                    rw.RelayIndex = newRelay;
                else
                    barrier.RelayWirings.Remove(rw);
            }


        }


    }

    private async void UpdateDigitalInputStatus(bool toggled, int diIndex)
    {
        OperationResponse
             response = await ProtoChangeDeviceIOStatusServiceClient.SetProtoIOStatusAsync(new SetIOStatusRequest()
                 {
                     IoType = (int)ioElementType.DigitalInput,
                     Index = diIndex,
                     Status = toggled ? 1 : 0
                 });

        Console.WriteLine("here response ");

        if (response == null)
            return;

        if (response.Success == false)
        {

            Console.WriteLine("success is false ");

            var diVM = digitalInpuuts.Where(di => di.Index == diIndex).FirstOrDefault();

            if (diVM == null)
                return;

            var tg = toggled;
            var task = Task.Run(async () =>
              {
                  diVM.Activated = tg;
                  await InvokeAsync(() => { this.StateHasChanged(); });

                  await Task.Delay(200);

                  diVM.Activated = !tg;
                  await InvokeAsync(() => { this.StateHasChanged(); });
              });


            Snackbar.Add("Failed to change the digital input status.", Severity.Error);
        }


    }



    // VM events:
    private void OnRotationOpenStarted(object? sender, EventArgs e)
    {
        Task.Run(RotateToOpen);
    }

    private async Task RotateToOpen()
    {
        lock (lockObj)
        {
            _lastCmdTryToOpen = true;
        }
        /// JS code:
        await _jsModule.InvokeAsync<object>("setImageRotation", _rotatingImage, -90, _dotNetReference);
        /// JS code end.
    }

    private void OnRotationCloseStarted(object? sender, EventArgs e)
    {
        Task.Run(RotateToClose);
    }

    private async Task RotateToClose()
    {
        lock (lockObj)
        {
            _lastCmdTryToOpen = false;
        }
        /// JS code:
        await _jsModule.InvokeAsync<object>("setImageRotation", _rotatingImage, 0, _dotNetReference);
        /// JS code end.
    }



    // Aux:
    private static string ConvertIOTypeToString(int ioType)
    {
        return "Digital input";
    }


}
