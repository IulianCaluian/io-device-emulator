@page "/barriersimulator"
@using ioDeviceEmulator.Client.ViewModels;

<MudGrid Justify="Justify.FlexStart" xs="12">

    <MudItem>
        <MudPaper Class="pa-8 ma-2" Elevation="4">

            <h3>BarrierSimulator</h3>

 @*           <MudButton @onclick="OpenBarrier">Open</MudButton>
            <MudButton @onclick="CloseBarrier">Close</MudButton>
            <MudButton @onclick="PauseBarrier">Stop</MudButton>*@



      

            <div style="width:200px; height:200px;">
                <div>
                    <img width="60" src="Images/barrier_body.svg" style="position:absolute;" />
                </div>
                <div  class="movethis" style="position:absolute; transform: translate(28px, 16px)">
                    <img width="120"  src="Images/barrier_arm_240_80_c40_big.svg"
                         style=" transform-origin: 11% 50%;">
                </div>
                <div class="movethis" style="position:absolute; transform: translate(132px, 16px)">
                    <img width="120" src="Images/barrier_arm_240_80_c40_sml.svg"
                         style=" transform-origin: 11% 50%;">
                </div>
            </div>

            @if (barrier.BarrierTerminals == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var di in barrier.BarrierTerminals)
                {
                    var diIndex = di.Index;

                    <MudStack Row="true" Class="d-flex align-center">
                        <MudToggleIconButton Toggled="@di.Activated" ToggledChanged="@(e => UpdateBarrierTerminalStatus(e, diIndex))"
                                     Icon="@Icons.Material.Filled.LinkOff" Color="@Color.Error" Title="Open"
                                     ToggledIcon="@Icons.Material.Filled.Link" ToggledColor="@Color.Success" ToggledTitle="Closed" />
                        <MudText Style="margin-right:12px">@di.Name is @(di.Activated ? "On (1)" : "Off (0)")</MudText>
                        </MudStack>
                }
            }

        </MudPaper>

    </MudItem>

 </MudGrid>

@code {

    private BarrierViewModel barrier;

    public BarrierSimulator( )
    {
        barrier = new BarrierViewModel();
    }


    public void OnRotationChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void UpdateBarrierTerminalStatus(bool toggled, int diIndex)
    {
        barrier.UpdateBarrierTerminal(diIndex, toggled);
    }



}
