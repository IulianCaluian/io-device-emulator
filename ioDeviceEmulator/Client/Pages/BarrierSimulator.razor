@page "/barriersimulator"
@using ioDeviceEmulator.Client.ViewModels;

<MudGrid Justify="Justify.FlexStart" xs="12">

    <MudItem>
        <MudPaper Class="pa-8 ma-2" Elevation="4">

            <h3>BarrierSimulator</h3>

            <MudButton @onclick="OpenBarrier">Open</MudButton>
            <MudButton @onclick="CloseBarrier">Close</MudButton>
      @*      <MudButton @onclick="StartRaising">Stop</MudButton>*@
            <MudButton @onclick="PauseBarrier">Stop</MudButton>
@*            <MudButton @onclick="StartLowering">Stop</MudButton>*@


            @barrier.Rotation.ToString()

            <div>
                <img width="70" src="Images/barrier_body.svg" style="position:relative;" />
            </div>
            <div  class="movethis" style="position:relative; transform: translate(26px, -160px)">
                <img width="230"  src="Images/barrier_arm.svg"
                     style="transform: rotate(@(barrier.Rotation)deg) !important; transform-origin: 11% 50%;">
            </div>

            

        </MudPaper>

    </MudItem>

 </MudGrid>

@code {

    private BarrierViewModel barrier;

    public BarrierSimulator()
    {
        barrier = new BarrierViewModel();
        barrier.RotationChanged += new EventHandler<EventArgs>(OnRotationChanged);
    }

    public void OnRotationChanged(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    async Task OpenBarrier()
    {
        await barrier.OpenBarrier();
    }

    async Task CloseBarrier()
    {
        await barrier.CloseBarrier();
    }

    public Task PauseBarrier()
    {
        barrier.PauseBarrier();
        return Task.CompletedTask;
    }

 



}
